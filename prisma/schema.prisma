// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  username  String         @unique @db.VarChar(20)
  email     String         @unique
  password  String
  bio       String?
  avatar    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  followers Followership[] @relation("Followers")
  following Followership[] @relation("Following")
  recipes   Recipe[]
  comments  Comment[]
  likes     Like[]

  @@index([username, email])
  @@map("users")
}

model Recipe {
  id           String       @id @default(uuid())
  title        String
  description  String?      @db.Text()
  vegetarian   Boolean
  vegan        Boolean
  cookDuration Int
  price        Float
  healthy      Boolean
  sustainable  Boolean
  servings     Int
  dairyFree    Boolean
  glutenFree   Boolean
  ingredients  Ingredient[]
  imageUrl     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  comments     Comment[]
  Like         Like[]

  @@map("recipes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String

  @@unique([userId, recipeId])
  @@map("likes")
}

model Followership {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
  @@map("followerships")
}

model Ingredient {
  id        String @id @default(uuid())
  name      String
  amount    Int
  unit      String
  unitShort String
  Recipe    Recipe @relation(fields: [recipeId], references: [id])
  recipeId  String

  @@map("ingredients")
}
